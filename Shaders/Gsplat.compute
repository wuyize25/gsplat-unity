#define GROUP_SIZE 1024

// DeviceRadixSort
#define KEY_FLOAT
#define PAYLOAD_UINT
//#pragma multi_compile __ KEY_UINT KEY_INT KEY_FLOAT
//#pragma multi_compile __ PAYLOAD_UINT PAYLOAD_INT PAYLOAD_FLOAT
#pragma multi_compile __ SHOULD_ASCEND
#pragma multi_compile __ SORT_PAIRS
#pragma multi_compile __ VULKAN

//#pragma kernel InitPayload
#pragma kernel CalcDistance
#pragma kernel InitDeviceRadixSort
#pragma kernel Upsweep
#pragma kernel Scan
#pragma kernel Downsweep


// GPU sorting needs wave ops
#pragma require wavebasic
#pragma require waveballot
#pragma use_dxc

#include "DeviceRadixSort.hlsl"

//uint _SplatCount;
StructuredBuffer<float3> _PositionBuffer;
float4x4 _MatrixMV;

/*[numthreads(GROUP_SIZE,1,1)]
void InitPayload(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;

    b_sortPayload[idx] = idx;
}*/

[numthreads(GROUP_SIZE,1,1)]
void CalcDistance(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= e_numKeys)
        return;

    float3 pos = _PositionBuffer[idx];
    pos = mul(_MatrixMV, float4(pos.xyz, 1)).xyz;
    b_sort[idx] = pos.z;
    b_sortPayload[idx] = idx;
}
